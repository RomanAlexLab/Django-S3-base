# app_config/cors_conf.py
"""
Этот файл содержит настройки Content Security Policy (CSP) для проекта на Django.
CSP — это инструмент безопасности, который помогает защитить ваш сайт от атак, таких как
Cross-Site Scripting (XSS), указывая браузеру, какие источники контента (скрипты, стили,
изображения и т.д.) разрешено загружать.

Все переменные здесь начинаются с префикса 'CORS_' — это сделано специально, чтобы их
легко было отличить от других настроек. Эти переменные импортируются в файл settings.py,
чтобы настроить CSP через библиотеку 'django-csp'.

Примечание: Этот файл предполагает, что вы используете S3 для хранения статических
или медиафайлов, и данные S3 импортируются из 'app_config.s3_conf'.
"""

from app_config.s3_conf import S3Data
from app_config.const_conf import G_APP_DOMAIN
# -------------------------------
# Основной домен сайта
# -------------------------------
# Это домен вашего сайта. Сейчас он настроен на локальный сервер разработки: 'http://127.0.0.1:8000'.
# В продакшене (на реальном сайте) замените это на ваш настоящий домен, например, 'https://example.com'.
CORS_MAIN_DOMAIN = G_APP_DOMAIN

# -------------------------------
# URL для S3 CDN
# -------------------------------
# Эта переменная создаёт URL для вашего S3-бакета, где хранятся статические или медиафайлы.
# Она использует данные из 'S3Data' (endpoint и имя бакета), чтобы сформировать полный адрес.
# Этот URL добавляется в разные CSP-настройки, чтобы разрешить загрузку ресурсов из S3.
CORS_S3_CDN_URL = f"https://{S3Data.AWS_S3_ENDPOINT_URL}.{S3Data.AWS_STORAGE_BUCKET_NAME}"

# -------------------------------
# Настройки Content Security Policy (CSP)
# -------------------------------
# Эти переменные задают правила CSP. Каждая из них отвечает за определённый тип ресурсов
# (скрипты, стили, изображения и т.д.) и указывает, откуда их можно загружать.

# Указывает, какие директивы CSP будут включать nonce (уникальный код для каждой страницы).
# Nonce повышает безопасность, разрешая только те скрипты и стили, которые имеют
# соответствующий nonce, генерируемый библиотекой django-csp.
# - 'script-src': Добавляет nonce к дирек Redacted
# - 'style-src': Добавляет nonce к директивам стилей, разрешая встроенные <style>.
# Пример использования в шаблонах:
#   <script nonce="{{ csp_nonce }}">console.log("Безопасный скрипт");</script>
#   <style nonce="{{ csp_nonce }}">body { background-color: #f0f0f0; }</style>
# Важно: Убедитесь, что все встроенные скрипты и стили имеют атрибут nonce.
#
CORS_CSP_INCLUDE_NONCE_IN = ['script-src', 'style-src']
#
# При использовании Nonce: Раскоментируйте CORS_CSP_INCLUDE_NONCE_IN
# Импортируйте данную конфигрурацию в settings.py --> CSP_INCLUDE_NONCE_IN = CORS_CSP_INCLUDE_NONCE_IN
# В CORS_CSP_SCRIPT_SRC и CORS_CSP_STYLE_SRC удалите или закомментируйте unsafe-inline и unsafe-eval
# В templates шаблонах укажите во всех местах <script nonce="{{ csp_nonce }}"></script>, <style nonce="{{ csp_nonce }}"></style>
# Добавление nonce к тегу <link> для CSS-файлов не требуется, если CSS-файл загружается из внешнего источника 
# (например, файла .css), указанного в CORS_CSP_STYLE_SRC. 
# Тег <link> используется для подключения внешних CSS-файлов, и CSP проверяет только источник файла (URL), а не nonce. 
# Однако, если вы используете встроенные стили (<style>), то nonce нужен.
# Также дело обстоит и со <script src="...">

# Основное правило по умолчанию для всех ресурсов, если не указано иное.
# "'self'" означает, что ресурсы можно загружать только с того же домена, что и сайт.
CORS_CSP_DEFAULT_SRC = ["'self'"]

# Источники скриптов: Указывает, откуда можно загружать JavaScript-файлы.
# - "'self'": Разрешает скрипты с того же домена.
# - "'unsafe-inline'": Разрешает встроенные скрипты (например, <script> в HTML или onclick).
#   Внимание: Это снижает безопасность, но может быть нужно, например, для Django Admin.
# - "'unsafe-eval'": Разрешает выполнение кода через eval(), что иногда нужно для JS-фреймворков.
# - CORS_S3_CDN_URL: Разрешает скрипты из вашего S3-бакета.
CORS_CSP_SCRIPT_SRC = [
    "'self'",
    #"'unsafe-inline'",  # Разрешает встроенные скрипты (осторожно с безопасностью)
    #"'unsafe-eval'",    # Разрешает eval() (осторожно с безопасностью)
    CORS_S3_CDN_URL,
]

# Источники стилей: Указывает, откуда можно загружать CSS и стили.
# - "'self'": Разрешает стили с того же домена.
# - "'unsafe-inline'": Разрешает встроенные стили (<style> или style="...").
# - "https://fonts.googleapis.com": Разрешает загрузку стилей Google Fonts.
# - CORS_S3_CDN_URL: Разрешает стили из вашего S3-бакета.
CORS_CSP_STYLE_SRC = [
    "'self'",
    #"'unsafe-inline'",                 # Разрешает встроенные стили
    #"https://fonts.googleapis.com",    # Для Google Fonts (удалите, если не используете)
    CORS_S3_CDN_URL,
]

# Источники изображений: Указывает, откуда можно загружать картинки.
# - "'self'": Разрешает изображения с того же домена.
# - "data:": Разрешает изображения в формате base64 (data:image/...).
# - "blob:": Разрешает изображения, созданные через JavaScript (например, blob).
# - CORS_S3_CDN_URL: Разрешает изображения из вашего S3-бакета.
CORS_CSP_IMG_SRC = [
    "'self'",
    "data:",            # Разрешает base64-изображения
    "blob:",            # Разрешает blob-изображения
    CORS_S3_CDN_URL,
]

# Источники шрифтов: Указывает, откуда можно загружать шрифты.
# - "'self'": Разрешает шрифты с того же домена.
# - "data:": Разрешает шрифты в формате data URI.
# - "https://fonts.gstatic.com": Разрешает шрифты от Google Fonts.
# - CORS_S3_CDN_URL: Разрешает шрифты из вашего S3-бакета.
CORS_CSP_FONT_SRC = [
    "'self'",
    "data:",                        # Разрешает шрифты в data URI
    #"https://fonts.gstatic.com",   # Для Google Fonts (удалите, если не используете)
    CORS_S3_CDN_URL,
]

# Источники подключений: Указывает, куда сайт может отправлять запросы (например, AJAX).
# - "'self'": Разрешает запросы на тот же домен.
# - "https://api.example.com": Пример разрешения запросов к внешнему API (замените на ваш API).
CORS_CSP_CONNECT_SRC = [
    "'self'",
    #"https://api.example.com",  # Замените на ваш API, если используете
]

# Источники объектов: Указывает, откуда можно загружать <object>, <embed>, <applet>.
# - "'none'": Запрещает все такие элементы — это повышает безопасность.
CORS_CSP_OBJECT_SRC = ["'none'"]  # Запрещает <object>, <embed>, <applet>

# Источники медиа: Указывает, откуда можно загружать аудио и видео.
# - "'self'": Разрешает медиа с того же домена.
# - CORS_S3_CDN_URL: Разрешает медиа из вашего S3-бакета.
CORS_CSP_MEDIA_SRC = [
    "'self'",
    CORS_S3_CDN_URL,
]

# Источники фреймов: Указывает, что можно загружать в <frame> и <iframe>.
# - "'self'": Разрешает фреймы с того же домена.
# - CORS_S3_CDN_URL: Разрешает встраивание контента из S3 (например, видео).
CORS_CSP_FRAME_SRC = [
    "'self'",
    CORS_S3_CDN_URL,
]

# Базовый URI: Ограничивает адреса для тега <base>.
# - "'self'": Разрешает только тот же домен.
CORS_CSP_BASE_URI = ["'self'"]

# Действия форм: Указывает, куда формы могут отправлять данные.
# - "'self'": Разрешает отправку только на тот же домен.
CORS_CSP_FORM_ACTION = ["'self'"]

# Источники манифеста: Указывает, откуда можно загружать манифест веб-приложения.
# - "'self'": Разрешает только с того же домена.
CORS_CSP_MANIFEST_SRC = ["'self'"]

# -------------------------------
# Как использовать этот файл
# -------------------------------
"""
Чтобы применить эти настройки CSP в вашем Django-проекте:
1. Убедитесь, что библиотека 'django-csp' установлена 
и добавлено в settings.py --> MIDDLEWARE --> django.middleware.security.SecurityMiddleware.
2. Импортируйте все переменные из этого файла в settings.py.
3. Назначьте каждую переменную соответствующей настройке CSP в settings.py.

Пример для settings.py:
from app_config.cors_conf import *

CSP_DEFAULT_SRC = CORS_CSP_DEFAULT_SRC
CSP_SCRIPT_SRC = CORS_CSP_SCRIPT_SRC
CSP_STYLE_SRC = CORS_CSP_STYLE_SRC
# ... и так далее для каждой настройки

Настройте значения под ваш проект:
   - Замените CORS_MAIN_DOMAIN на ваш реальный домен в продакшене.
   - Добавьте или удалите источники в зависимости от используемых внешних ресурсов.
   - Если не используете Google Fonts, удалите соответствующие строки.
   - "'unsafe-inline'" и "'unsafe-eval'" снижают безопасность. Если возможно, избегайте их,
     используйте nonce или хеши для встроенных скриптов и стилей.

5. Сначала протестируйте CSP в режиме отчётов (CSP_REPORT_ONLY = True в settings.py),
   чтобы найти проблемы, не блокируя ресурсы. Для данного режима также необходимо натсроить url
   (например CSP_REPORT_URI = '/csp-report/'), который будет принимать отчёты и логировать их.
   Более подробную информацию смотрите в соответсвующей документации.
"""