"""
Django settings for app_config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import copy
from pathlib import Path
from dotenv import load_dotenv
from app_config.s3_conf import S3Data, STORAGES_CONF
from app_config.log_conf import PATH_LOG_FILE, LOG_CONF
from app_config.const_conf import G_ALLOWED_HOSTS_LIST
from app_config.cors_conf import *


load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# == Режим разработки ==
MODE_DEV = False

# == Настройка логирования ==
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if MODE_DEV else False

# Создание диреткорий и logfile + путь до logfile
LOG_FILE = PATH_LOG_FILE
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

# Указываем как обрабатывать наш словарь логирования
LOGGING_CONFIG = 'logging.config.dictConfig'

# Делаем глубокую копию конфигурации логирования
LOGGING = copy.deepcopy(LOG_CONF)

# Задаём реальный путь к файлу логов
LOGGING['handlers']['file']['filename'] = LOG_FILE

# Если DEBUG выключен — меняем уровень всех логгеров на ERROR
if not DEBUG:
    for logger in LOGGING['loggers'].values():
        logger['level'] = 'ERROR'


# == Разрешённые Hosts ==
ALLOWED_HOSTS = G_ALLOWED_HOSTS_LIST


# Content-Security-Policy (CSP)
MAIN_DOMAIN = CORS_MAIN_DOMAIN
CSP_DEFAULT_SRC = CORS_CSP_DEFAULT_SRC
CSP_INCLUDE_NONCE_IN = CORS_CSP_INCLUDE_NONCE_IN
CSP_SCRIPT_SRC = CORS_CSP_SCRIPT_SRC
CSP_STYLE_SRC = CORS_CSP_STYLE_SRC
CSP_IMG_SRC = CORS_CSP_IMG_SRC
CSP_FONT_SRC = CORS_CSP_FONT_SRC
CSP_CONNECT_SRC = CORS_CSP_CONNECT_SRC
CSP_OBJECT_SRC = CORS_CSP_OBJECT_SRC
CSP_MEDIA_SRC = CORS_CSP_MEDIA_SRC
CSP_FRAME_SRC = CORS_CSP_FRAME_SRC
CSP_BASE_URI = CORS_CSP_BASE_URI
CSP_FORM_ACTION = CORS_CSP_FORM_ACTION
CSP_MANIFEST_SRC = CORS_CSP_MANIFEST_SRC


# Application
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'storages',
    'app_storage',
]


# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
]


# Основной файл маршрутизации URL-адресов (URLconf)
ROOT_URLCONF = 'app_config.urls'


# Директории html шаблонов
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Конфигурация WSGI
WSGI_APPLICATION = 'app_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# == Хранилище и файлы ==

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Локальные директории со статикой (Где Django ищет статику при сборке)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

if MODE_DEV:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATIC_URL = '/static/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'
else:
    # Локальные директории, куда складывается собранная статика или
    # загружаются пользовательские файлы (При работе с S3 не используется)
    # DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    # STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

    # Конфигурация S3
    STORAGES = STORAGES_CONF

    # Ссылки на директории с файлами (Откуда Django берёт пути при формировании ссылкок на файлы)
    # Если при работе с S3 используются свои кофигурации для медиа файлов,
    # то MEDIA_URL не используется, но оставлен лишь как значение по умолчанию. 
    STATIC_URL = f"https://{S3Data.AWS_S3_CUSTOM_DOMAIN}/static/"
    MEDIA_URL = f"https://{S3Data.AWS_S3_CUSTOM_DOMAIN}/media/"